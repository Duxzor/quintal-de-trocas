$(document).ready(function() {

  if ($('body.toys-index').length) {

    // Asynchronously Load the map API
    var script = document.createElement('script');
    script.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyBzgRvMidyz6Ss0JfNX1F-caivPmDYT6i8&callback=initialize";
    document.body.appendChild(script);
  }

  if ($('body.toys-edit').length || $('body.toys-new').length) {
    
    $("#toy_tag_list").tagit({
      caseSensitive: false,
      allowSpaces: true,
      minLength: 2,
      removeConfirmation: true,
      autocomplete: {delay: 0},
      tagLimit: 10,
      onTagLimitExceeded: function(event, ui) {
        alert("Você só pode cadastrar 10 palavras-chave.");
      }
    });
  }

  if ($('body.toys-show').length) {

    $("#gallery").on("mouseover", "a", function(e){
      e.preventDefault();
      $index = $(this).attr("rel");
      $("#gallery .content img[class='img-"+$index+"']").show().siblings().hide();
    });

    // Asynchronously Load the map API
    var script = document.createElement('script');
    script.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyBzgRvMidyz6Ss0JfNX1F-caivPmDYT6i8&callback=codeAddress";
    document.body.appendChild(script);

    console.log("Toy page...");

    $(".toy-exchange").on("change", "select", function(e){
      console.log("changed");
      console.log($(this).val());
      $this = $(this);

      $.ajax({
        url: '/brinquedos/'+$(this).val(),
        dataType: 'json'
        // data: {param1: 'value1'},
      })
      .success(function(e) {

        console.log("success");
        console.log(e);
        console.log($(this));
        $this.parent().find(".toy").html(e.title);
      });

    });

    $(".toy-filter").change(function(event) {
      event.preventDefault();

      console.log("form alterado");

      $(this).submit();
    });

  }


  

});


function initialize() {
  var map;
  var bounds = new google.maps.LatLngBounds();
  
  var markers;

  var customMapTypeId = 'custom_style';
  var customMapType = new google.maps.StyledMapType([
      {
        elementType: 'labels',
        stylers: [{visibility: 'off'}]
      },
      {
        featureType: 'water',
        stylers: [{color: '#a2daf2'}]
      }
    ], {
      name: 'Custom Style'
  });

  var mapOptions = {
      mapTypeId: 'roadmap',
      mapTypeControlOptions: {
        mapTypeIds: [google.maps.MapTypeId.ROADMAP, customMapTypeId]
      }
  };

  // Display a map on the page
  map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
  map.setTilt(45);

  map.mapTypes.set(customMapTypeId, customMapType);
  map.setMapTypeId(customMapTypeId);

  // Multiple Markers

  // var markers = [];
  $.getJSON("<%= Rails.application.routes.url_helpers.index_near_toys_path %>", function( data ) {
    console.log(data);
    markers = data;
    // $.each( data, function( key, val ) {
    //   markers.push([val]);
    // });

    // Display multiple markers on a map
    var infoWindow = new google.maps.InfoWindow({maxWidth: 200}), marker, i;

    // Loop through our array of markers & place each one on the map
    for( i = 0; i < markers.length; i++ ) {
        var position = new google.maps.LatLng(markers[i][1], markers[i][2]);
        bounds.extend(position);
        marker = new google.maps.Marker({
            position: position,
            map: map,
            title: markers[i][0]
        });

        // Allow each marker to have an info window
        google.maps.event.addListener(marker, 'click', (function(marker, i) {
            return function() {
                infoWindow.setContent(markers[i][markers[i].length-1]);
                infoWindow.open(map, marker);
            }
        })(marker, i));

        google.maps.event.addListener(marker, 'mouseover', (function(marker, i) {
          console.log(marker);
          console.log(i);
        })(marker, i));

        // Automatically center the map fitting all markers on the screen
        map.fitBounds(bounds);
    }

    

    // Override our map zoom level once our fitBounds function runs (Make sure it only runs once)
    var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function(event) {
        // this.setZoom(8);
        google.maps.event.removeListener(boundsListener);
    });

    // Try HTML5 geolocation.
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };

        infoWindow.setPosition(pos);
        infoWindow.setContent('Location found.');
        map.setCenter(pos);
      }, function() {
        handleLocationError(true, infoWindow, map.getCenter());
      });
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }

    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
      pos = {
        lat: parseFloat($(".user-location-lat").text()),
        lng: parseFloat($(".user-location-lon").text())
      };
      infoWindow.setPosition(pos);
      // infoWindow.setContent(browserHasGeolocation ?
      //                     'Error: The Geolocation service failed.' :
      //                     'Error: Your browser doesn\'t support geolocation.');
    }

    // console.log(markers);
  });
  //Toy.limit(5).each{|x| a << [x.title, x.user.latitude, x.user.longitude] }

  // var markers = [
  //   ['London Eye, London', 51.503454,-0.119562],
  //   ['Palace of Westminster, London', 51.499633,-0.124755]
  // ];


}
